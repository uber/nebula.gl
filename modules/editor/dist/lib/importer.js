"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseImport = parseImport;

var _togeojson = require("@tmcw/togeojson");

var _core = require("@loaders.gl/core");

var _wkt = require("@loaders.gl/wkt");

/* eslint-env browser */
function shouldTryGeoJson(data) {
  return data.startsWith('{');
}

function shouldTryKml(data) {
  return data.startsWith('<');
}

function shouldTryWkt(data) {
  return data.startsWith('POINT') || data.startsWith('LINESTRING') || data.startsWith('POLYGON') || data.startsWith('MULTIPOINT') || data.startsWith('MULTILINESTRING') || data.startsWith('MULTIPOLYGON');
}

function getCleanedFeatures(geojson) {
  if (geojson.type !== 'FeatureCollection' && geojson.type !== 'Feature') {
    throw Error("GeoJSON must have type of 'Feature' or 'FeatureCollection'");
  }

  var features = geojson.type === 'FeatureCollection' ? geojson.features : [geojson];
  return features.map(getCleanedFeature);
}

function getCleanedFeature(feature) {
  var id = feature.id; // reduce null-checking

  var properties = feature.properties || {};
  var geometry = feature.geometry; // @ts-ignore

  if (geometry.type === 'GeometryCollection' && geometry.geometries.length === 1) {
    // There's only one geometry
    // @ts-ignore
    geometry = geometry.geometries[0]; // @ts-ignore
  } else if (geometry.type === 'GeometryCollection' && geometry.geometries.length > 1) {
    // @ts-ignore
    var types = new Set(geometry.geometries.map(function (g) {
      return g.type;
    }));

    if (types.size === 1) {
      // See if it can be combined into a Multi* geometry
      var type = types.values().next().value;

      if (type === 'Polygon') {
        // Combine all the Polygons into a single MultiPolygon
        geometry = {
          type: 'MultiPolygon',
          // @ts-ignore
          coordinates: geometry.geometries.map(function (g) {
            return g.coordinates;
          })
        };
      } else if (type === 'LineString') {
        // Combine all the LineStrings into a single MultiLineString
        geometry = {
          type: 'MultiLineString',
          // @ts-ignore
          coordinates: geometry.geometries.map(function (g) {
            return g.coordinates;
          })
        };
      }
    } else {
      // Mixed geometry types, we don't yet handle it
      throw Error('GeometryCollection geometry type not yet supported');
    }
  } // @ts-ignore


  return {
    type: 'Feature',
    id: id,
    geometry: geometry,
    properties: properties
  };
}

function parseImportString(data) {
  data = data.trim();
  var validData;
  var validationErrors = [];

  if (shouldTryGeoJson(data)) {
    // Parse as GeoJSON
    try {
      var parsed = JSON.parse(data);
      validData = {
        valid: true,
        type: 'GeoJSON',
        features: getCleanedFeatures(parsed)
      };
    } catch (err) {
      validationErrors.push('Error parsing GeoJSON');
      validationErrors.push(err.toString());
    }
  } else if (shouldTryKml(data)) {
    // Parse as KML
    var xml = new DOMParser().parseFromString(data, 'text/xml');

    try {
      var _parsed = (0, _togeojson.kml)(xml);
      /*
      TODO: Revisit using loaders.gl/kml for this later
      const parsed_ = parseSync(data, KMLasGeoJsonLoader);
      // This is changing the coordinates to floats, because in loaders.gl/kml 2.1.1 they are returned as strings.
      const parsed = {
        ...parsed_,
        features: parsed_.features.map(f => ({
          ...f,
          geometry: {
            ...f.geometry,
            coordinates: f.geometry.coordinates.map(coords => coords.map(triple => triple.map(s => Number.parseFloat(s))))
          }
        }))
      };
      */


      var isFeature = _parsed && _parsed.type === 'Feature';
      var isFeatureCollectionWithFeatures = _parsed && _parsed.type === 'FeatureCollection' && _parsed.features.length > 0;
      var isValid = isFeature || isFeatureCollectionWithFeatures;

      if (isValid) {
        validData = {
          valid: true,
          type: 'KML',
          features: getCleanedFeatures(_parsed)
        };
      } else {
        validationErrors.push('Invalid KML');
      }
    } catch (err) {
      validationErrors.push('Error parsing KML');
      validationErrors.push(err.toString());
    }
  } else if (shouldTryWkt(data)) {
    try {
      var _parsed2 = (0, _core.parseSync)(data, _wkt.WKTLoader);

      if (_parsed2) {
        validData = {
          valid: true,
          type: 'WKT',
          features: [{
            type: 'Feature',
            properties: {},
            geometry: _parsed2
          }]
        };
      } else {
        validationErrors.push('Invalid WKT');
      }
    } catch (err) {
      validationErrors.push('Error parsing WKT');
      validationErrors.push(err.toString());
    }
  } else {
    validationErrors.push('Unknown data format');
  }

  if (validData) {
    return Promise.resolve(validData);
  }

  return Promise.resolve({
    valid: false,
    validationErrors: validationErrors
  });
}

function parseImportFile(file) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();

    reader.onload = function () {
      var fileAsString = reader.result;
      resolve(parseImportString(fileAsString));
    };

    reader.onabort = function () {
      reject(Error('file reading was aborted'));
    };

    reader.onerror = function () {
      reject(Error('file reading has failed'));
    };

    reader.readAsText(file);
  });
}

function parseImport(data) {
  if (typeof data === 'string') {
    return parseImportString(data);
  }

  return parseImportFile(data);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,