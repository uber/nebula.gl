"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.featureStyle = featureStyle;
exports.editHandleStyle = editHandleStyle;

var _constants = require("./constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RECT_STYLE = {
  stroke: '#7ac943',
  strokeWidth: 2,
  x: -6,
  y: -6,
  height: 12,
  width: 12
};
var CIRCLE_RADIUS = 8;
var SELECTED_STYLE = {
  stroke: 'rgb(38, 181, 242)',
  strokeWidth: 2,
  fill: 'rgb(189,189,189)',
  fillOpacity: 0.3
};
var HOVERED_STYLE = {
  stroke: 'rgb(38, 181, 242)',
  strokeWidth: 2,
  fill: 'rgb(122,202,67)',
  fillOpacity: 0.3
};
var UNCOMMITTED_STYLE = {
  stroke: 'rgb(189,189,189)',
  strokeDasharray: '4,2',
  strokeWidth: 2,
  fill: 'rgb(189,189,189)',
  fillOpacity: 0.1
};
var INACTIVE_STYLE = UNCOMMITTED_STYLE;
var DEFAULT_STYLE = {
  stroke: '#000000',
  strokeWidth: 2,
  fill: '#a9a9a9',
  fillOpacity: 0.1
};

function featureStyle(_ref) {
  var feature = _ref.feature,
      state = _ref.state;
  var type = feature.properties.shape || feature.geometry.type;
  var style = null;

  switch (state) {
    case _constants.RENDER_STATE.SELECTED:
      style = _objectSpread({}, SELECTED_STYLE);
      break;

    case _constants.RENDER_STATE.HOVERED:
      style = _objectSpread({}, HOVERED_STYLE);
      break;

    case _constants.RENDER_STATE.UNCOMMITTED:
    case _constants.RENDER_STATE.CLOSING:
      style = _objectSpread({}, UNCOMMITTED_STYLE);
      break;

    case _constants.RENDER_STATE.INACTIVE:
      style = _objectSpread({}, INACTIVE_STYLE);
      break;

    default:
      style = _objectSpread({}, DEFAULT_STYLE);
  }

  switch (type) {
    case _constants.SHAPE.POINT:
      style.r = CIRCLE_RADIUS;
      break;

    case _constants.SHAPE.LINE_STRING:
      style.fill = 'none';
      break;

    case _constants.SHAPE.POLYGON:
      if (state === _constants.RENDER_STATE.CLOSING) {
        style.strokeDasharray = '4,2';
      }

      break;

    case _constants.SHAPE.RECTANGLE:
      if (state === _constants.RENDER_STATE.UNCOMMITTED) {
        style.strokeDasharray = '4,2';
      }

      break;

    default:
  }

  return style;
}

function editHandleStyle(_ref2) {
  var feature = _ref2.feature,
      shape = _ref2.shape,
      index = _ref2.index,
      state = _ref2.state;
  var style = {};

  switch (state) {
    case _constants.RENDER_STATE.SELECTED:
      style = _objectSpread({}, SELECTED_STYLE);
      break;

    case _constants.RENDER_STATE.HOVERED:
      style = _objectSpread({}, HOVERED_STYLE);
      break;

    case _constants.RENDER_STATE.UNCOMMITTED:
    case _constants.RENDER_STATE.CLOSING:
      style = _objectSpread({}, UNCOMMITTED_STYLE);
      break;

    case _constants.RENDER_STATE.INACTIVE:
      style = _objectSpread({}, INACTIVE_STYLE);
      break;

    default:
      style = _objectSpread({}, DEFAULT_STYLE);
  }

  switch (shape) {
    case 'circle':
      //@ts-ignore
      style.r = CIRCLE_RADIUS;
      break;

    case 'rect':
      style = _objectSpread({}, style, {}, RECT_STYLE);
      break;

    default:
  }

  return style;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZS50cyJdLCJuYW1lcyI6WyJSRUNUX1NUWUxFIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJ4IiwieSIsImhlaWdodCIsIndpZHRoIiwiQ0lSQ0xFX1JBRElVUyIsIlNFTEVDVEVEX1NUWUxFIiwiZmlsbCIsImZpbGxPcGFjaXR5IiwiSE9WRVJFRF9TVFlMRSIsIlVOQ09NTUlUVEVEX1NUWUxFIiwic3Ryb2tlRGFzaGFycmF5IiwiSU5BQ1RJVkVfU1RZTEUiLCJERUZBVUxUX1NUWUxFIiwiZmVhdHVyZVN0eWxlIiwiZmVhdHVyZSIsInN0YXRlIiwidHlwZSIsInByb3BlcnRpZXMiLCJzaGFwZSIsImdlb21ldHJ5Iiwic3R5bGUiLCJSRU5ERVJfU1RBVEUiLCJTRUxFQ1RFRCIsIkhPVkVSRUQiLCJVTkNPTU1JVFRFRCIsIkNMT1NJTkciLCJJTkFDVElWRSIsIlNIQVBFIiwiUE9JTlQiLCJyIiwiTElORV9TVFJJTkciLCJQT0xZR09OIiwiUkVDVEFOR0xFIiwiZWRpdEhhbmRsZVN0eWxlIiwiaW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxNQUFNLEVBQUUsU0FEUztBQUVqQkMsRUFBQUEsV0FBVyxFQUFFLENBRkk7QUFHakJDLEVBQUFBLENBQUMsRUFBRSxDQUFDLENBSGE7QUFJakJDLEVBQUFBLENBQUMsRUFBRSxDQUFDLENBSmE7QUFLakJDLEVBQUFBLE1BQU0sRUFBRSxFQUxTO0FBTWpCQyxFQUFBQSxLQUFLLEVBQUU7QUFOVSxDQUFuQjtBQVNBLElBQU1DLGFBQWEsR0FBRyxDQUF0QjtBQUVBLElBQU1DLGNBQWMsR0FBRztBQUNyQlAsRUFBQUEsTUFBTSxFQUFFLG1CQURhO0FBRXJCQyxFQUFBQSxXQUFXLEVBQUUsQ0FGUTtBQUdyQk8sRUFBQUEsSUFBSSxFQUFFLGtCQUhlO0FBSXJCQyxFQUFBQSxXQUFXLEVBQUU7QUFKUSxDQUF2QjtBQU9BLElB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SSxPQUFsQjtBQUNFTCxNQUFBQSxLQUFLLHFCQUFRWCxpQkFBUixDQUFMO0FBQ0E7O0FBRUYsU0FBS1ksd0JBQWFLLFFBQWxCO0FBQ0VOLE1BQUFBLEtBQUsscUJBQVFULGNBQVIsQ0FBTDtBQUNBOztBQUVGO0FBQ0VTLE1BQUFBLEtBQUsscUJBQVFSLGFBQVIsQ0FBTDtBQW5CSjs7QUFzQkEsVUFBUU0sS0FBUjtBQUNFLFNBQUssUUFBTDtBQUNFO0FBQ0FFLE1BQUFBLEtBQUssQ0FBQ1MsQ0FBTixHQUFVekIsYUFBVjtBQUNBOztBQUNGLFNBQUssTUFBTDtBQUNFZ0IsTUFBQUEsS0FBSyxxQkFBUUEsS0FBUixNQUFrQnZCLFVBQWxCLENBQUw7QUFDQTs7QUFDRjtBQVJGOztBQVdBLFNBQU91QixLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSRU5ERVJfU1RBVEUsIFNIQVBFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBSRUNUX1NUWUxFID0ge1xuICBzdHJva2U6ICcjN2FjOTQzJyxcbiAgc3Ryb2tlV2lkdGg6IDIsXG4gIHg6IC02LFxuICB5OiAtNixcbiAgaGVpZ2h0OiAxMixcbiAgd2lkdGg6IDEyLFxufTtcblxuY29uc3QgQ0lSQ0xFX1JBRElVUyA9IDg7XG5cbmNvbnN0IFNFTEVDVEVEX1NUWUxFID0ge1xuICBzdHJva2U6ICdyZ2IoMzgsIDE4MSwgMjQyKScsXG4gIHN0cm9rZVdpZHRoOiAyLFxuICBmaWxsOiAncmdiKDE4OSwxODksMTg5KScsXG4gIGZpbGxPcGFjaXR5OiAwLjMsXG59O1xuXG5jb25zdCBIT1ZFUkVEX1NUWUxFID0ge1xuICBzdHJva2U6ICdyZ2IoMzgsIDE4MSwgMjQyKScsXG4gIHN0cm9rZVdpZHRoOiAyLFxuICBmaWxsOiAncmdiKDEyMiwyMDIsNjcpJyxcbiAgZmlsbE9wYWNpdHk6IDAuMyxcbn07XG5cbmNvbnN0IFVOQ09NTUlUVEVEX1NUWUxFID0ge1xuICBzdHJva2U6ICdyZ2IoMTg5LDE4OSwxODkpJyxcbiAgc3Ryb2tlRGFzaGFycmF5OiAnNCwyJyxcbiAgc3Ryb2tlV2lkdGg6IDIsXG4gIGZpbGw6ICdyZ2IoMTg5LDE4OSwxODkpJyxcbiAgZmlsbE9wYWNpdHk6IDAuMSxcbn07XG5cbmNvbnN0IElOQUNUSVZFX1NUWUxFID0gVU5DT01NSVRURURfU1RZTEU7XG5cbmNvbnN0IERFRkFVTFRfU1RZTEUgPSB7XG4gIHN0cm9rZTogJyMwMDAwMDAnLFxuICBzdHJva2VXaWR0aDogMixcbiAgZmlsbDogJyNhOWE5YTknLFxuICBmaWxsT3BhY2l0eTogMC4xLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZlYXR1cmVTdHlsZSh7IGZlYXR1cmUsIHN0YXRlIH0pIHtcbiAgY29uc3QgdHlwZSA9IGZlYXR1cmUucHJvcGVydGllcy5zaGFwZSB8fCBmZWF0dXJlLmdlb21ldHJ5LnR5cGU7XG4gIGxldCBzdHlsZSA9IG51bGw7XG5cbiAgc3dpdGNoIChzdGF0ZSkge1xuICAgIGNhc2UgUkVOREVSX1NUQVRFLlNFTEVDVEVEOlxuICAgICAgc3R5bGUgPSB7IC4uLlNFTEVDVEVEX1NUWUxFIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUkVOREVSX1NUQVRFLkhPVkVSRUQ6XG4gICAgICBzdHlsZSA9IHsgLi4uSE9WRVJFRF9TVFlMRSB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFJFTkRFUl9TVEFURS5VTkNPTU1JVFRFRDpcbiAgICBjYXNlIFJFTkRFUl9TVEFURS5DTE9TSU5HOlxuICAgICAgc3R5bGUgPSB7IC4uLlVOQ09NTUlUVEVEX1NUWUxFIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUkVOREVSX1NUQVRFLklOQUNUSVZFOlxuICAgICAgc3R5bGUgPSB7IC4uLklOQUNUSVZFX1NUWUxFIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzdHlsZSA9IHsgLi4uREVGQVVMVF9TVFlMRSB9O1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBTSEFQRS5QT0lOVDpcbiAgICAgIHN0eWxlLnIgPSBDSVJDTEVfUkFESVVTO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTSEFQRS5MSU5FX1NUUklORzpcbiAgICAgIHN0eWxlLmZpbGwgPSAnbm9uZSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNIQVBFLlBPTFlHT046XG4gICAgICBpZiAoc3RhdGUgPT09IFJFTkRFUl9TVEFURS5DTE9TSU5HKSB7XG4gICAgICAgIHN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICc0LDInO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICBjYXNlIFNIQVBFLlJFQ1RBTkdMRTpcbiAgICAgIGlmIChzdGF0ZSA9PT0gUkVOREVSX1NUQVRFLlVOQ09NTUlUVEVEKSB7XG4gICAgICAgIHN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICc0LDInO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWRpdEhhbmRsZVN0eWxlKHsgZmVhdHVyZSwgc2hhcGUsIGluZGV4LCBzdGF0ZSB9KSB7XG4gIGxldCBzdHlsZSA9IHt9O1xuICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgY2FzZSBSRU5ERVJfU1RBVEUuU0VMRUNURUQ6XG4gICAgICBzdHlsZSA9IHsgLi4uU0VMRUNURURfU1RZTEUgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBSRU5ERVJfU1RBVEUuSE9WRVJFRDpcbiAgICAgIHN0eWxlID0geyAuLi5IT1ZFUkVEX1NUWUxFIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgUkVOREVSX1NUQVRFLlVOQ09NTUlUVEVEOlxuICAgIGNhc2UgUkVOREVSX1NUQVRFLkNMT1NJTkc6XG4gICAgICBzdHlsZSA9IHsgLi4uVU5DT01NSVRURURfU1RZTEUgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBSRU5ERVJfU1RBVEUuSU5BQ1RJVkU6XG4gICAgICBzdHlsZSA9IHsgLi4uSU5BQ1RJVkVfU1RZTEUgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHN0eWxlID0geyAuLi5ERUZBVUxUX1NUWUxFIH07XG4gIH1cblxuICBzd2l0Y2ggKHNoYXBlKSB7XG4gICAgY2FzZSAnY2lyY2xlJzpcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgc3R5bGUuciA9IENJUkNMRV9SQURJVVM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZWN0JzpcbiAgICAgIHN0eWxlID0geyAuLi5zdHlsZSwgLi4uUkVDVF9TVFlMRSB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cbiJdfQ==