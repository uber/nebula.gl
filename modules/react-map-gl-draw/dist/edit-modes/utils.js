"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumeric = isNumeric;
exports.parseEventElement = parseEventElement;
exports.getScreenCoords = getScreenCoords;
exports.findClosestPointOnLineSegment = findClosestPointOnLineSegment;
exports.getFeatureCoordinates = getFeatureCoordinates;
exports.updateRectanglePosition = updateRectanglePosition;

var _constants = require("../constants");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function isNumeric(val) {
  return !Array.isArray(val) && !isNaN(parseFloat(val)) && isFinite(val);
}

function parseEventElement(evt, features, guides) {
  var elem = evt.target;

  if (!elem || !elem.dataset || !elem.dataset.type) {
    return null;
  }

  var featureIndex = elem.dataset.featureIndex;
  featureIndex = isNumeric(featureIndex) ? Number(featureIndex) : -1;
  var index = elem.dataset.index;
  index = isNumeric(index) ? Number(index) : undefined;
  var type = elem.dataset.type;
  var tentativeFeature = guides && guides.find(function (g) {
    return g.properties.guideType === _constants.GUIDE_TYPE.TENTATIVE;
  });
  var object = null;
  var isGuide = false;

  switch (type) {
    case _constants.ELEMENT_TYPE.EDIT_HANDLE:
      object = guides.find(function (g) {
        var indexes = g.properties.positionIndexes;

        if (indexes) {
          return indexes[indexes.length - 1] === index;
        }

        return false;
      });
      isGuide = true;
      break;

    case _constants.ELEMENT_TYPE.SEGMENT:
    case _constants.ELEMENT_TYPE.FEATURE:
    case _constants.ELEMENT_TYPE.FILL:
      object = features[featureIndex] || tentativeFeature;
      break;

    default:
  }

  return {
    object: object,
    isGuide: isGuide,
    type: type,
    index: index,
    featureIndex: featureIndex
  };
}

function getScreenCoords(evt) {
  var _evt$offsetCenter = evt.offsetCenter,
      x = _evt$offsetCenter.x,
      y = _evt$offsetCenter.y;
  return [Number(x), Number(y)];
}

function findClosestPointOnLineSegment(p1, p2, p) {
  // line
  var k = (p2[1] - p1[1]) / (p2[0] - p1[0]);
  var b = p1[1] - k * p1[0]; // vertical line

  if (!isFinite(k)) {
    var q = [p1[0], p[1]];
    return inBounds(p1, p2, q) ? q : null;
  } // p is on line [p1, p2]


  if (p[0] * k + b - p[1] === 0) {
    return inBounds(p1, p2, p) ? p : null;
  }

  var qx = (k * p[1] + p[0] - k * b) / (k * k + 1);
  var qy = k * qx + b;
  return inBounds(p1, p2, [qx, qy]) ? [qx, qy] : null;
}

function getFeatureCoordinates(feature) {
  var coordinates = feature && feature.geometry && feature.geometry.coordinates;

  if (!coordinates) {
    return null;
  }

  var isPolygonal = feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON;
  var isSinglePoint = feature.geometry.type === _constants.GEOJSON_TYPE.POINT;
  return isPolygonal ? coordinates[0] : isSinglePoint ? [coordinates] : coordinates;
}

function updateRectanglePosition(feature, editHandleIndex, mapCoords) {
  var coordinates = getFeatureCoordinates(feature);

  if (!coordinates) {
    return null;
  } // @ts-ignore


  var points = coordinates.slice(0, 4);
  points[editHandleIndex % 4] = mapCoords;
  /*
   *   p0.x, p0.y (p0) ------ p2.x, p0.y (p1)
   *       |                      |
   *       |                      |
   *   p0.x, p2.y (p3) ----- p2.x, p2.y (p2)
   */

  var p0 = points[(editHandleIndex + 2) % 4];
  var p2 = points[editHandleIndex % 4];
  points[(editHandleIndex + 1) % 4] = [p2[0], p0[1]];
  points[(editHandleIndex + 3) % 4] = [p0[0], p2[1]];
  return feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON ? [[].concat(_toConsumableArray(points), [points[0]])] : points;
}

function inBounds(p1, p2, p) {
  var bounds = [Math.min(p1[0], p2[0]), Math.max(p1[0], p2[0]), Math.min(p1[1], p2[1]), Math.max(p1[1], p2[1])];
  return p[0] >= bounds[0] && p[0] <= bounds[1] && p[1] >= bounds[2] && p[1] <= bounds[3];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lZGl0LW1vZGVzL3V0aWxzLnRzIl0sIm5hbWVzIjpbImlzTnVtZXJpYyIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwicGFyc2VFdmVudEVsZW1lbnQiLCJldnQiLCJmZWF0dXJlcyIsImd1aWRlcyIsImVsZW0iLCJ0YXJnZXQiLCJkYXRhc2V0IiwidHlwZSIsImZlYXR1cmVJbmRleCIsIk51bWJlciIsImluZGV4IiwidW5kZWZpbmVkIiwidGVudGF0aXZlRmVhdHVyZSIsImZpbmQiLCJnIiwicHJvcGVydGllcyIsImd1aWRlVHlwZSIsIkdVSURFX1RZUEUiLCJURU5UQVRJVkUiLCJvYmplY3QiLCJpc0d1aWRlIiwiRUxFTUVOVF9UWVBFIiwiRURJVF9IQU5ETEUiLCJpbmRleGVzIiwicG9zaXRpb25JbmRleGVzIiwibGVuZ3RoIiwiU0VHTUVOVCIsIkZFQVRVUkUiLCJGSUxMIiwiZ2V0U2NyZWVuQ29vcmRzIiwib2Zmc2V0Q2VudGVyIiwieCIsInkiLCJmaW5kQ2xvc2VzdFBvaW50T25MaW5lU2VnbWVudCIsInAxIiwicDIiLCJwIiwiayIsImIiLCJxIiwiaW5Cb3VuZHMiLCJxeCIsInF5IiwiZ2V0RmVhdHVyZUNvb3JkaW5hdGVzIiwiZmVhdHVyZSIsImNvb3JkaW5hdGVzIiwiZ2VvbWV0cnkiLCJpc1BvbHlnb25hbCIsIkdFT0pTT05fVFlQRSIsIlBPTFlHT04iLCJpc1NpbmdsZVBvaW50IiwiUE9JTlQiLCJ1cGRhdGVSZWN0YW5nbGVQb3NpdGlvbiIsImVkaXRIYW5kbGVJbmRleCIsIm1hcENvb3JkcyIsInBvaW50cyIsInNsaWNlIiwicDAiLCJib3VuZHMiLCJNYXRoIiwibWluIiwibWF4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7QUFFTyxTQUFTQSxTQUFULENBQW1CQyxHQUFuQixFQUE2QjtBQUNsQyxTQUFPLENBQUNDLEtBQUssQ0FB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QVFzQixNQUFNLENBQUMsQ0FBRCxDQUF4RCxJQUErRHRCLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUXNCLE1BQU0sQ0FBQyxDQUFELENBQXBGO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNam9sbmlyRXZlbnQgfSBmcm9tICdtam9sbmlyLmpzJztcbmltcG9ydCB0eXBlIHsgRmVhdHVyZU9mLCBGZWF0dXJlLCBQb2x5Z29uLCBQb3NpdGlvbiB9IGZyb20gJ0BuZWJ1bGEuZ2wvZWRpdC1tb2Rlcyc7XG5cbmltcG9ydCB7IEdFT0pTT05fVFlQRSwgRUxFTUVOVF9UWVBFLCBHVUlERV9UWVBFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWw6IGFueSkge1xuICByZXR1cm4gIUFycmF5LmlzQXJyYXkodmFsKSAmJiAhaXNOYU4ocGFyc2VGbG9hdCh2YWwpKSAmJiBpc0Zpbml0ZSh2YWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFdmVudEVsZW1lbnQoZXZ0OiBNam9sbmlyRXZlbnQsIGZlYXR1cmVzOiBGZWF0dXJlW10sIGd1aWRlczogRmVhdHVyZVtdKSB7XG4gIGNvbnN0IGVsZW0gPSBldnQudGFyZ2V0O1xuICBpZiAoIWVsZW0gfHwgIWVsZW0uZGF0YXNldCB8fCAhZWxlbS5kYXRhc2V0LnR5cGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBmZWF0dXJlSW5kZXggPSBlbGVtLmRhdGFzZXQuZmVhdHVyZUluZGV4O1xuICBmZWF0dXJlSW5kZXggPSBpc051bWVyaWMoZmVhdHVyZUluZGV4KSA/IE51bWJlcihmZWF0dXJlSW5kZXgpIDogLTE7XG5cbiAgbGV0IGluZGV4ID0gZWxlbS5kYXRhc2V0LmluZGV4O1xuICBpbmRleCA9IGlzTnVtZXJpYyhpbmRleCkgPyBOdW1iZXIoaW5kZXgpIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHR5cGUgPSBlbGVtLmRhdGFzZXQudHlwZTtcbiAgY29uc3QgdGVudGF0aXZlRmVhdHVyZSA9XG4gICAgZ3VpZGVzICYmIGd1aWRlcy5maW5kKChnKSA9PiBnLnByb3BlcnRpZXMuZ3VpZGVUeXBlID09PSBHVUlERV9UWVBFLlRFTlRBVElWRSk7XG4gIGxldCBvYmplY3QgPSBudWxsO1xuICBsZXQgaXNHdWlkZSA9IGZhbHNlO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgRUxFTUVOVF9UWVBFLkVESVRfSEFORExFOlxuICAgICAgb2JqZWN0ID0gZ3VpZGVzLmZpbmQoKGcpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXhlcyA9IGcucHJvcGVydGllcy5wb3NpdGlvbkluZGV4ZXM7XG4gICAgICAgIGlmIChpbmRleGVzKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ZXNbaW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpc0d1aWRlID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRUxFTUVOVF9UWVBFLlNFR01FTlQ6XG4gICAgY2FzZSBFTEVNRU5UX1RZUEUuRkVBVFVSRTpcbiAgICBjYXNlIEVMRU1FTlRfVFlQRS5GSUxMOlxuICAgICAgb2JqZWN0ID0gZmVhdHVyZXNbZmVhdHVyZUluZGV4XSB8fCB0ZW50YXRpdmVGZWF0dXJlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb2JqZWN0LFxuICAgIGlzR3VpZGUsXG4gICAgdHlwZSxcbiAgICBpbmRleCxcbiAgICBmZWF0dXJlSW5kZXgsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JlZW5Db29yZHMoZXZ0OiBNam9sbmlyRXZlbnQpIHtcbiAgY29uc3Qge1xuICAgIG9mZnNldENlbnRlcjogeyB4LCB5IH0sXG4gIH0gPSBldnQ7XG4gIHJldHVybiBbTnVtYmVyKHgpLCBOdW1iZXIoeSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZENsb3Nlc3RQb2ludE9uTGluZVNlZ21lbnQocDE6IFBvc2l0aW9uLCBwMjogUG9zaXRpb24sIHA6IFBvc2l0aW9uKSB7XG4gIC8vIGxpbmVcbiAgY29uc3QgayA9IChwMlsxXSAtIHAxWzFdKSAvIChwMlswXSAtIHAxWzBdKTtcbiAgY29uc3QgYiA9IHAxWzFdIC0gayAqIHAxWzBdO1xuXG4gIC8vIHZlcnRpY2FsIGxpbmVcbiAgaWYgKCFpc0Zpbml0ZShrKSkge1xuICAgIGNvbnN0IHE6IFBvc2l0aW9uID0gW3AxWzBdLCBwWzFdXTtcbiAgICByZXR1cm4gaW5Cb3VuZHMocDEsIHAyLCBxKSA/IHEgOiBudWxsO1xuICB9XG5cbiAgLy8gcCBpcyBvbiBsaW5lIFtwMSwgcDJdXG4gIGlmIChwWzBdICogayArIGIgLSBwWzFdID09PSAwKSB7XG4gICAgcmV0dXJuIGluQm91bmRzKHAxLCBwMiwgcCkgPyBwIDogbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHF4ID0gKGsgKiBwWzFdICsgcFswXSAtIGsgKiBiKSAvIChrICogayArIDEpO1xuICBjb25zdCBxeSA9IGsgKiBxeCArIGI7XG5cbiAgcmV0dXJuIGluQm91bmRzKHAxLCBwMiwgW3F4LCBxeV0pID8gW3F4LCBxeV0gOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmVhdHVyZUNvb3JkaW5hdGVzKGZlYXR1cmU6IEZlYXR1cmUpIHtcbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBmZWF0dXJlICYmIGZlYXR1cmUuZ2VvbWV0cnkgJiYgZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgaWYgKCFjb29yZGluYXRlcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgaXNQb2x5Z29uYWwgPSBmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09IEdFT0pTT05fVFlQRS5QT0xZR09OO1xuICBjb25zdCBpc1NpbmdsZVBvaW50ID0gZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSBHRU9KU09OX1RZUEUuUE9JTlQ7XG4gIHJldHVybiBpc1BvbHlnb25hbCA/IGNvb3JkaW5hdGVzWzBdIDogaXNTaW5nbGVQb2ludCA/IFtjb29yZGluYXRlc10gOiBjb29yZGluYXRlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVJlY3RhbmdsZVBvc2l0aW9uKFxuICBmZWF0dXJlOiBGZWF0dXJlT2Y8UG9seWdvbj4sXG4gIGVkaXRIYW5kbGVJbmRleDogbnVtYmVyLFxuICBtYXBDb29yZHM6IFBvc2l0aW9uXG4pIHtcbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBnZXRGZWF0dXJlQ29vcmRpbmF0ZXMoZmVhdHVyZSk7XG4gIGlmICghY29vcmRpbmF0ZXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIGNvbnN0IHBvaW50cyA9IGNvb3JkaW5hdGVzLnNsaWNlKDAsIDQpO1xuICBwb2ludHNbZWRpdEhhbmRsZUluZGV4ICUgNF0gPSBtYXBDb29yZHM7XG5cbiAgLypcbiAgICogICBwMC54LCBwMC55IChwMCkgLS0tLS0tIHAyLngsIHAwLnkgKHAxKVxuICAgKiAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogICAgICAgfCAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgcDAueCwgcDIueSAocDMpIC0tLS0tIHAyLngsIHAyLnkgKHAyKVxuICAgKi9cbiAgY29uc3QgcDAgPSBwb2ludHNbKGVkaXRIYW5kbGVJbmRleCArIDIpICUgNF07XG4gIGNvbnN0IHAyID0gcG9pbnRzW2VkaXRIYW5kbGVJbmRleCAlIDRdO1xuICBwb2ludHNbKGVkaXRIYW5kbGVJbmRleCArIDEpICUgNF0gPSBbcDJbMF0sIHAwWzFdXTtcbiAgcG9pbnRzWyhlZGl0SGFuZGxlSW5kZXggKyAzKSAlIDRdID0gW3AwWzBdLCBwMlsxXV07XG5cbiAgcmV0dXJuIGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gR0VPSlNPTl9UWVBFLlBPTFlHT04gPyBbWy4uLnBvaW50cywgcG9pbnRzWzBdXV0gOiBwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGluQm91bmRzKHAxOiBQb3NpdGlvbiwgcDI6IFBvc2l0aW9uLCBwOiBQb3NpdGlvbik6IGJvb2xlYW4ge1xuICBjb25zdCBib3VuZHMgPSBbXG4gICAgTWF0aC5taW4ocDFbMF0sIHAyWzBdKSxcbiAgICBNYXRoLm1heChwMVswXSwgcDJbMF0pLFxuICAgIE1hdGgubWluKHAxWzFdLCBwMlsxXSksXG4gICAgTWF0aC5tYXgocDFbMV0sIHAyWzFdKSxcbiAgXTtcblxuICByZXR1cm4gcFswXSA+PSBib3VuZHNbMF0gJiYgcFswXSA8PSBib3VuZHNbMV0gJiYgcFsxXSA+PSBib3VuZHNbMl0gJiYgcFsxXSA8PSBib3VuZHNbM107XG59XG4iXX0=